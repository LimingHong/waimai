<?php
 namespace GuzzleHttp\Promise; class EachPromise implements PromisorInterface { private $pending = array(); private $iterable; private $concurrency; private $onFulfilled; private $onRejected; private $aggregate; private $mutex; public function __construct($iterable, array $config = array()) { goto KVkXa; TeoXr: if (!isset($config["\146\x75\154\x66\151\154\x6c\x65\144"])) { goto Bwc21; } goto ji3t8; S8c8n: $this->concurrency = $config["\x63\157\x6e\x63\165\162\x72\145\156\x63\171"]; goto gZJYm; ejCA1: Bwc21: goto ZKpiq; onGwh: sF1_L: goto fqpUE; ZKpiq: if (!isset($config["\162\145\152\x65\143\x74\x65\x64"])) { goto sF1_L; } goto c3UgZ; gZJYm: xLHfv: goto TeoXr; KVkXa: $this->iterable = iter_for($iterable); goto bAmKk; c3UgZ: $this->onRejected = $config["\162\x65\x6a\145\x63\x74\145\x64"]; goto onGwh; ji3t8: $this->onFulfilled = $config["\146\165\154\146\151\x6c\154\145\x64"]; goto ejCA1; bAmKk: if (!isset($config["\143\157\156\x63\165\162\x72\x65\x6e\143\x79"])) { goto xLHfv; } goto S8c8n; fqpUE: } public function promise() { goto C4jTe; C4jTe: if (!$this->aggregate) { goto NBfaH; } goto B45VR; M18_g: NBfaH: goto hEvNl; RtE_V: return $this->aggregate; goto FxjeU; hEvNl: try { goto hOOpu; RFGqJ: $this->refillPending(); goto ySfmd; hOOpu: $this->createPromise(); goto gvBVk; gvBVk: $this->iterable->rewind(); goto RFGqJ; ySfmd: } catch (\Throwable $e) { $this->aggregate->reject($e); } catch (\Exception $e) { $this->aggregate->reject($e); } goto RtE_V; B45VR: return $this->aggregate; goto M18_g; FxjeU: } private function createPromise() { goto Z76tN; Z76tN: $this->mutex = false; goto wPs0Z; JEzBD: $clearFn = function () { $this->iterable = $this->concurrency = $this->pending = null; $this->onFulfilled = $this->onRejected = null; }; goto uPjxt; wPs0Z: $this->aggregate = new Promise(function () { reset($this->pending); if (!(empty($this->pending) && !$this->iterable->valid())) { goto zuggt; } $this->aggregate->resolve(null); return; zuggt: FnUTk: if (!($promise = current($this->pending))) { goto uJDAI; } next($this->pending); $promise->wait(); if (!($this->aggregate->getState() !== PromiseInterface::PENDING)) { goto SbcvK; } return; SbcvK: goto FnUTk; uJDAI: }); goto JEzBD; uPjxt: $this->aggregate->then($clearFn, $clearFn); goto W8J_Y; W8J_Y: } private function refillPending() { goto Mod26; cSQ8k: if (!($this->addPending() && $this->advanceIterator())) { goto r7kGN; } goto OWpqo; BBWUr: t8UqV: goto VDi2f; zERTt: $concurrency = is_callable($this->concurrency) ? call_user_func($this->concurrency, count($this->pending)) : $this->concurrency; goto zZnwj; VDi2f: if (!(--$concurrency && $this->advanceIterator() && $this->addPending())) { goto wPnOG; } goto q5LOR; D59d9: NGfeF: goto H1mSX; Lz4Oi: if ($concurrency) { goto NGfeF; } goto JX948; Mod26: if ($this->concurrency) { goto ikfd9; } goto hyVJa; imu3A: wPnOG: goto D7ptX; et9UP: r7kGN: goto AEL2Y; hyVJa: VDs8p: goto cSQ8k; H1mSX: $this->addPending(); goto BBWUr; JX948: return; goto D59d9; S5_5u: ikfd9: goto zERTt; q5LOR: goto t8UqV; goto imu3A; OWpqo: goto VDs8p; goto et9UP; zZnwj: $concurrency = max($concurrency - count($this->pending), 0); goto Lz4Oi; AEL2Y: return; goto S5_5u; D7ptX: } private function addPending() { goto dP3sT; Haq_J: return false; goto F1FUR; dP3sT: if (!(!$this->iterable || !$this->iterable->valid())) { goto yzMt9; } goto Haq_J; o1oyX: $promise = promise_for($this->iterable->current()); goto Iltse; F1FUR: yzMt9: goto o1oyX; m6233: return true; goto u7UtI; Iltse: $idx = $this->iterable->key(); goto Pi7rt; Pi7rt: $this->pending[$idx] = $promise->then(function ($value) use($idx) { if (!$this->onFulfilled) { goto uK4bl; } call_user_func($this->onFulfilled, $value, $idx, $this->aggregate); uK4bl: $this->step($idx); }, function ($reason) use($idx) { if (!$this->onRejected) { goto coW_O; } call_user_func($this->onRejected, $reason, $idx, $this->aggregate); coW_O: $this->step($idx); }); goto m6233; u7UtI: } private function advanceIterator() { goto el28K; F8Yem: bHYlU: goto jKYUT; el28K: if (!$this->mutex) { goto bHYlU; } goto YSjKS; YSjKS: return false; goto F8Yem; x3G9D: try { goto cXMan; i4dfx: $this->mutex = false; goto abWA7; abWA7: return true; goto TYWsx; cXMan: $this->iterable->next(); goto i4dfx; TYWsx: } catch (\Throwable $e) { goto OvxtJ; wZvbL: $this->mutex = false; goto OxWdS; OvxtJ: $this->aggregate->reject($e); goto wZvbL; OxWdS: return false; goto Y6Cwc; Y6Cwc: } catch (\Exception $e) { goto PLq40; Ivhf1: return false; goto XmH1Z; PLq40: $this->aggregate->reject($e); goto cDEir; cDEir: $this->mutex = false; goto Ivhf1; XmH1Z: } goto tjV13; jKYUT: $this->mutex = true; goto x3G9D; tjV13: } private function step($idx) { goto nxsNf; MKPbz: if (!($this->advanceIterator() && !$this->checkIfFinished())) { goto KzfS3; } goto Ygx49; nxsNf: if (!($this->aggregate->getState() !== PromiseInterface::PENDING)) { goto lfDLO; } goto yK57J; Ygx49: $this->refillPending(); goto zk1TJ; yK57J: return; goto rEPXo; dkVfg: unset($this->pending[$idx]); goto MKPbz; rEPXo: lfDLO: goto dkVfg; zk1TJ: KzfS3: goto eCA9R; eCA9R: } private function checkIfFinished() { goto l4dJm; E_yyw: $this->aggregate->resolve(null); goto xd71G; xd71G: return true; goto pmFYZ; X55jY: return false; goto ziGUv; l4dJm: if (!(!$this->pending && !$this->iterable->valid())) { goto nxddp; } goto E_yyw; pmFYZ: nxddp: goto X55jY; ziGUv: } }