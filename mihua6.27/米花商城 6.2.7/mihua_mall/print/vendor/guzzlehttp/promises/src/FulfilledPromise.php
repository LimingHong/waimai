<?php
 namespace GuzzleHttp\Promise; class FulfilledPromise implements PromiseInterface { private $value; public function __construct($value) { goto vS7VL; vS7VL: if (!method_exists($value, "\x74\x68\145\x6e")) { goto BoipC; } goto UM3qy; Qcyr8: $this->value = $value; goto qFSZq; qfoxe: BoipC: goto Qcyr8; UM3qy: throw new \InvalidArgumentException("\131\x6f\x75\x20\143\141\x6e\x6e\157\x74\x20\143\x72\145\x61\x74\x65\40\141\40\106\165\x6c\x66\151\x6c\x6c\x65\144\x50\162\157\x6d\x69\x73\145\40\167\151\x74\x68\40\141\x20\x70\162\157\155\151\x73\145\x2e"); goto qfoxe; qFSZq: } public function then(callable $onFulfilled = null, callable $onRejected = null) { goto bndgG; NeTVG: $value = $this->value; goto II10E; Ydv67: $p = new Promise([$queue, "\162\x75\156"]); goto NeTVG; pk5mD: return $this; goto ygs7u; nhuPz: return $p; goto vEtOa; ygs7u: XFNxy: goto NCm7g; bndgG: if ($onFulfilled) { goto XFNxy; } goto pk5mD; II10E: $queue->add(static function () use($p, $value, $onFulfilled) { if (!($p->getState() === self::PENDING)) { goto qy2tl; } try { $p->resolve($onFulfilled($value)); } catch (\Throwable $e) { $p->reject($e); } catch (\Exception $e) { $p->reject($e); } qy2tl: }); goto nhuPz; NCm7g: $queue = queue(); goto Ydv67; vEtOa: } public function otherwise(callable $onRejected) { return $this->then(null, $onRejected); } public function wait($unwrap = true, $defaultDelivery = null) { return $unwrap ? $this->value : null; } public function getState() { return self::FULFILLED; } public function resolve($value) { goto UU686; aIR4E: throw new \LogicException("\103\141\156\156\157\164\40\x72\x65\163\157\x6c\x76\x65\x20\x61\x20\x66\x75\154\x66\151\x6c\x6c\145\144\x20\160\x72\157\x6d\x69\x73\145"); goto Zxlxg; UU686: if (!($value !== $this->value)) { goto E5Y_H; } goto aIR4E; Zxlxg: E5Y_H: goto ZTgid; ZTgid: } public function reject($reason) { throw new \LogicException("\x43\141\x6e\x6e\157\164\x20\162\145\152\x65\143\x74\40\141\40\x66\165\154\146\151\154\154\x65\x64\x20\160\x72\157\x6d\151\x73\145"); } public function cancel() { } }