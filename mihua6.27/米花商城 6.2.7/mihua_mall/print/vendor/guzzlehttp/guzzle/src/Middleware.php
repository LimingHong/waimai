<?php
 namespace GuzzleHttp; use GuzzleHttp\Cookie\CookieJarInterface; use GuzzleHttp\Exception\RequestException; use GuzzleHttp\Promise\RejectedPromise; use GuzzleHttp\Psr7; use Psr\Http\Message\ResponseInterface; use Psr\Log\LoggerInterface; use Psr\Log\LogLevel; final class Middleware { public static function cookies() { return function (callable $handler) { return function ($request, array $options) use($handler) { if (empty($options["\143\x6f\x6f\153\x69\x65\163"])) { goto UL3xm; } if (!$options["\143\x6f\x6f\153\x69\145\163"] instanceof CookieJarInterface) { goto LaswO; } goto vmUA7; UL3xm: return $handler($request, $options); goto vmUA7; LaswO: throw new \InvalidArgumentException("\x63\157\x6f\x6b\151\x65\163\x20\x6d\x75\x73\164\40\x62\145\40\141\x6e\40\x69\x6e\163\x74\141\x6e\143\x65\x20\x6f\x66\40\x47\x75\172\x7a\154\145\110\164\164\160\x5c\103\x6f\157\153\x69\145\x5c\x43\x6f\x6f\x6b\151\x65\112\141\162\x49\156\164\145\x72\146\141\x63\145"); vmUA7: $cookieJar = $options["\143\x6f\157\153\151\x65\163"]; $request = $cookieJar->withCookieHeader($request); return $handler($request, $options)->then(function ($response) use($cookieJar, $request) { $cookieJar->extractCookies($request, $response); return $response; }); }; }; } public static function httpErrors() { return function (callable $handler) { return function ($request, array $options) use($handler) { if (!empty($options["\x68\164\164\160\x5f\x65\x72\x72\x6f\162\163"])) { goto HYfEY; } return $handler($request, $options); HYfEY: return $handler($request, $options)->then(function (ResponseInterface $response) use($request, $handler) { $code = $response->getStatusCode(); if (!($code < 400)) { goto MyHRb; } return $response; MyHRb: throw RequestException::create($request, $response); }); }; }; } public static function history(&$container) { goto iGMC3; U502r: throw new \InvalidArgumentException("\x68\x69\163\x74\157\x72\171\x20\143\157\156\164\x61\x69\x6e\x65\162\40\155\x75\x73\164\x20\x62\145\x20\141\156\40\141\162\162\x61\x79\40\157\162\40\x6f\x62\152\x65\x63\164\x20\x69\x6d\160\x6c\x65\155\145\156\x74\x69\x6e\x67\40\101\x72\x72\x61\x79\101\x63\143\145\163\163"); goto xZeis; SBchy: return function (callable $handler) use(&$container) { return function ($request, array $options) use($handler, &$container) { return $handler($request, $options)->then(function ($value) use($request, &$container, $options) { $container[] = ["\x72\145\161\x75\145\163\x74" => $request, "\162\x65\x73\x70\x6f\156\x73\x65" => $value, "\x65\162\162\157\x72" => null, "\x6f\160\x74\151\x6f\x6e\163" => $options]; return $value; }, function ($reason) use($request, &$container, $options) { $container[] = ["\162\145\161\165\145\163\164" => $request, "\x72\145\x73\x70\157\x6e\163\x65" => null, "\145\162\162\157\162" => $reason, "\x6f\160\x74\151\x6f\156\163" => $options]; return \GuzzleHttp\Promise\rejection_for($reason); }); }; }; goto Nzzom; xZeis: uA8CD: goto SBchy; iGMC3: if (!(!is_array($container) && !$container instanceof \ArrayAccess)) { goto uA8CD; } goto U502r; Nzzom: } public static function tap(callable $before = null, callable $after = null) { return function (callable $handler) use($before, $after) { return function ($request, array $options) use($handler, $before, $after) { if (!$before) { goto a192s; } $before($request, $options); a192s: $response = $handler($request, $options); if (!$after) { goto spEj7; } $after($request, $options, $response); spEj7: return $response; }; }; } public static function redirect() { return function (callable $handler) { return new RedirectMiddleware($handler); }; } public static function retry(callable $decider, callable $delay = null) { return function (callable $handler) use($decider, $delay) { return new RetryMiddleware($decider, $handler, $delay); }; } public static function log(LoggerInterface $logger, MessageFormatter $formatter, $logLevel = LogLevel::INFO) { return function (callable $handler) use($logger, $formatter, $logLevel) { return function ($request, array $options) use($handler, $logger, $formatter, $logLevel) { return $handler($request, $options)->then(function ($response) use($logger, $request, $formatter, $logLevel) { $message = $formatter->format($request, $response); $logger->log($logLevel, $message); return $response; }, function ($reason) use($logger, $request, $formatter) { $response = $reason instanceof RequestException ? $reason->getResponse() : null; $message = $formatter->format($request, $response, $reason); $logger->notice($message); return \GuzzleHttp\Promise\rejection_for($reason); }); }; }; } public static function prepareBody() { return function (callable $handler) { return new PrepareBodyMiddleware($handler); }; } public static function mapRequest(callable $fn) { return function (callable $handler) use($fn) { return function ($request, array $options) use($handler, $fn) { return $handler($fn($request), $options); }; }; } public static function mapResponse(callable $fn) { return function (callable $handler) use($fn) { return function ($request, array $options) use($handler, $fn) { return $handler($request, $options)->then($fn); }; }; } }