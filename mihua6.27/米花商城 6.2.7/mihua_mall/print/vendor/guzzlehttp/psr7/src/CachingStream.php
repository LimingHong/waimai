<?php
 namespace GuzzleHttp\Psr7; use Psr\Http\Message\StreamInterface; class CachingStream implements StreamInterface { use StreamDecoratorTrait; private $remoteStream; private $skipReadBytes = 0; public function __construct(StreamInterface $stream, StreamInterface $target = null) { $this->remoteStream = $stream; $this->stream = $target ?: new Stream(fopen("\x70\x68\x70\72\57\57\x74\145\155\x70", "\162\x2b")); } public function getSize() { return max($this->stream->getSize(), $this->remoteStream->getSize()); } public function rewind() { $this->seek(0); } public function seek($offset, $whence = SEEK_SET) { goto OQ457; BtrE5: KqPyr: goto rGhuZ; IAdqh: $diff = $byte - $this->stream->getSize(); goto qjVSH; gQF9G: $size = $this->remoteStream->getSize(); goto VuG02; tawHk: KBBI4: goto gQF9G; DePD6: $this->read($diff); goto IAdqh; v7Ug2: goto IaR0v; goto OMkZ8; vvihY: $byte = $offset + $this->tell(); goto Kxavk; qjVSH: goto oTYSS; goto iwQm2; N9kuZ: $byte = $offset; goto v7Ug2; OMkZ8: Rv84F: goto vvihY; iwQm2: GQdHa: goto BtrE5; SfPbg: if ($diff > 0) { goto zbqI0; } goto Q8ZvH; Gnd2M: $size = $this->cacheEntireStream(); goto KJX0v; UL7Dx: if ($whence == SEEK_END) { goto KBBI4; } goto ylYxm; mq6oF: if (!($diff > 0 && !$this->remoteStream->eof())) { goto GQdHa; } goto DePD6; wLRT2: $byte = $size + $offset; goto P2bMM; Uz54L: $diff = $byte - $this->stream->getSize(); goto SfPbg; RtESh: goto IaR0v; goto E6Bjz; TTCFb: if ($whence == SEEK_CUR) { goto Rv84F; } goto UL7Dx; Kxavk: goto IaR0v; goto tawHk; KJX0v: ZXQwK: goto wLRT2; VuG02: if (!($size === null)) { goto ZXQwK; } goto Gnd2M; BGFaY: oTYSS: goto mq6oF; P2bMM: IaR0v: goto Uz54L; Q8ZvH: $this->stream->seek($byte); goto FLNIe; YcRG5: zbqI0: goto BGFaY; FLNIe: goto KqPyr; goto YcRG5; OQ457: if ($whence == SEEK_SET) { goto N2Q5C; } goto TTCFb; ylYxm: throw new \InvalidArgumentException("\x49\156\166\141\x6c\x69\x64\40\x77\x68\x65\156\143\145"); goto RtESh; E6Bjz: N2Q5C: goto N9kuZ; rGhuZ: } public function read($length) { goto NjiM5; evI4a: mAzqB: goto hGBvX; hGBvX: return $data; goto Xi00X; mxMu1: $this->stream->write($remoteData); goto evI4a; kOQcp: $remoteData = $this->remoteStream->read($remaining + $this->skipReadBytes); goto skvAy; bg1vL: if (!$remaining) { goto mAzqB; } goto kOQcp; MII5R: LizZ5: goto Q4DeI; KE0vv: $len = strlen($remoteData); goto NTg2f; hyt95: $this->skipReadBytes = max(0, $this->skipReadBytes - $len); goto MII5R; NTg2f: $remoteData = substr($remoteData, $this->skipReadBytes); goto hyt95; NjiM5: $data = $this->stream->read($length); goto Jv5uc; skvAy: if (!$this->skipReadBytes) { goto LizZ5; } goto KE0vv; Q4DeI: $data .= $remoteData; goto mxMu1; Jv5uc: $remaining = $length - strlen($data); goto bg1vL; Xi00X: } public function write($string) { goto Hck5M; PYGSD: BWEjL: goto Dx818; Hck5M: $overflow = strlen($string) + $this->tell() - $this->remoteStream->tell(); goto VCjMz; Dx818: return $this->stream->write($string); goto l1m0W; VCjMz: if (!($overflow > 0)) { goto BWEjL; } goto qVVOd; qVVOd: $this->skipReadBytes += $overflow; goto PYGSD; l1m0W: } public function eof() { return $this->stream->eof() && $this->remoteStream->eof(); } public function close() { $this->remoteStream->close() && $this->stream->close(); } private function cacheEntireStream() { goto Kadd2; Kadd2: $target = new FnStream(["\x77\162\151\x74\x65" => "\x73\x74\162\154\145\156"]); goto VGH6i; jYnKB: return $this->tell(); goto WA9ub; VGH6i: copy_to_stream($this, $target); goto jYnKB; WA9ub: } }