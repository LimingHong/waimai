<?php
 namespace GuzzleHttp\Psr7; use Psr\Http\Message\StreamInterface; class FnStream implements StreamInterface { private $methods; private static $slots = array("\137\137\x74\x6f\x53\164\x72\x69\156\147", "\143\x6c\x6f\163\x65", "\144\x65\x74\141\x63\x68", "\x72\x65\x77\151\156\x64", "\x67\145\x74\123\x69\172\145", "\x74\145\x6c\154", "\x65\157\x66", "\151\x73\x53\x65\x65\153\x61\x62\154\145", "\163\145\145\153", "\x69\163\127\162\151\164\x61\142\154\x65", "\x77\x72\151\x74\x65", "\151\x73\122\x65\x61\144\141\142\154\145", "\162\145\141\144", "\x67\x65\164\103\157\156\x74\145\x6e\x74\163", "\147\x65\x74\x4d\145\x74\x61\144\x61\x74\141"); public function __construct(array $methods) { goto u5SZA; u5SZA: $this->methods = $methods; goto DkG1a; DkG1a: foreach ($methods as $name => $fn) { $this->{"\x5f\x66\156\x5f" . $name} = $fn; l9xML: } goto FLuF_; FLuF_: t9ZUl: goto fidAC; fidAC: } public function __get($name) { throw new \BadMethodCallException(str_replace("\137\x66\156\137", '', $name) . "\50\51\40\151\x73\40\156\157\164\x20\x69\155\x70\154\x65\x6d\145\x6e\164\145\x64\x20\151\x6e\40\x74\150\145\x20\x46\156\x53\164\162\x65\141\155"); } public function __destruct() { goto cPYgt; P9i9B: UYmnM: goto soCBA; rpYxS: call_user_func($this->_fn_close); goto P9i9B; cPYgt: if (!isset($this->_fn_close)) { goto UYmnM; } goto rpYxS; soCBA: } public static function decorate(StreamInterface $stream, array $methods) { goto ksepE; a4Wri: return new self($methods); goto Q0qgM; ksepE: foreach (array_diff(self::$slots, array_keys($methods)) as $diff) { $methods[$diff] = [$stream, $diff]; jT0kD: } goto nOH1X; nOH1X: eiPcc: goto a4Wri; Q0qgM: } public function __toString() { return call_user_func($this->_fn___toString); } public function close() { return call_user_func($this->_fn_close); } public function detach() { return call_user_func($this->_fn_detach); } public function getSize() { return call_user_func($this->_fn_getSize); } public function tell() { return call_user_func($this->_fn_tell); } public function eof() { return call_user_func($this->_fn_eof); } public function isSeekable() { return call_user_func($this->_fn_isSeekable); } public function rewind() { call_user_func($this->_fn_rewind); } public function seek($offset, $whence = SEEK_SET) { call_user_func($this->_fn_seek, $offset, $whence); } public function isWritable() { return call_user_func($this->_fn_isWritable); } public function write($string) { return call_user_func($this->_fn_write, $string); } public function isReadable() { return call_user_func($this->_fn_isReadable); } public function read($length) { return call_user_func($this->_fn_read, $length); } public function getContents() { return call_user_func($this->_fn_getContents); } public function getMetadata($key = null) { return call_user_func($this->_fn_getMetadata, $key); } }