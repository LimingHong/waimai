<?php
 namespace GuzzleHttp\Psr7; use Psr\Http\Message\UriInterface; final class UriNormalizer { const PRESERVING_NORMALIZATIONS = 63; const CAPITALIZE_PERCENT_ENCODING = 1; const DECODE_UNRESERVED_CHARACTERS = 2; const CONVERT_EMPTY_PATH = 4; const REMOVE_DEFAULT_HOST = 8; const REMOVE_DEFAULT_PORT = 16; const REMOVE_DOT_SEGMENTS = 32; const REMOVE_DUPLICATE_SLASHES = 64; const SORT_QUERY_PARAMETERS = 128; public static function normalize(UriInterface $uri, $flags = self::PRESERVING_NORMALIZATIONS) { goto Rlki1; K1FXb: qdISt: goto UfJxu; YrJEd: $uri = self::capitalizePercentEncoding($uri); goto ekgPw; jEKIc: $uri = $uri->withPath(UriResolver::removeDotSegments($uri->getPath())); goto HOmvW; VEN1X: wtZKC: goto vZIM9; X0jAf: $uri = $uri->withPath(preg_replace("\x23\x2f\57\x2b\x2b\x23", "\x2f", $uri->getPath())); goto gG06T; HOmvW: oBO7F: goto Js62B; UfJxu: return $uri; goto IsfWY; t2CT0: sort($queryKeyValues); goto tpa0x; gG06T: kDTRT: goto pw1fV; Rlki1: if (!($flags & self::CAPITALIZE_PERCENT_ENCODING)) { goto yHxjd; } goto YrJEd; pw1fV: if (!($flags & self::SORT_QUERY_PARAMETERS && $uri->getQuery() !== '')) { goto qdISt; } goto KikOk; GDDEp: faTYo: goto w0vvv; Js62B: if (!($flags & self::REMOVE_DUPLICATE_SLASHES)) { goto kDTRT; } goto X0jAf; HRnQq: LP0rC: goto Ev0Sj; tpa0x: $uri = $uri->withQuery(implode("\x26", $queryKeyValues)); goto K1FXb; vZIM9: if (!($flags & self::CONVERT_EMPTY_PATH && $uri->getPath() === '' && ($uri->getScheme() === "\x68\164\164\160" || $uri->getScheme() === "\150\x74\x74\160\x73"))) { goto vDAZe; } goto eQ6YT; KikOk: $queryKeyValues = explode("\x26", $uri->getQuery()); goto t2CT0; ekgPw: yHxjd: goto x_1RG; c5YEN: $uri = $uri->withPort(null); goto GDDEp; eQ6YT: $uri = $uri->withPath("\57"); goto Mw8w5; Svj_Y: $uri = $uri->withHost(''); goto HRnQq; OeD10: $uri = self::decodeUnreservedCharacters($uri); goto VEN1X; w0vvv: if (!($flags & self::REMOVE_DOT_SEGMENTS && !Uri::isRelativePathReference($uri))) { goto oBO7F; } goto jEKIc; Ev0Sj: if (!($flags & self::REMOVE_DEFAULT_PORT && $uri->getPort() !== null && Uri::isDefaultPort($uri))) { goto faTYo; } goto c5YEN; Mw8w5: vDAZe: goto WNAUv; WNAUv: if (!($flags & self::REMOVE_DEFAULT_HOST && $uri->getScheme() === "\146\151\x6c\x65" && $uri->getHost() === "\x6c\x6f\143\x61\154\x68\x6f\163\164")) { goto LP0rC; } goto Svj_Y; x_1RG: if (!($flags & self::DECODE_UNRESERVED_CHARACTERS)) { goto wtZKC; } goto OeD10; IsfWY: } public static function isEquivalent(UriInterface $uri1, UriInterface $uri2, $normalizations = self::PRESERVING_NORMALIZATIONS) { return (string) self::normalize($uri1, $normalizations) === (string) self::normalize($uri2, $normalizations); } private static function capitalizePercentEncoding(UriInterface $uri) { goto saJ30; Azf7c: return $uri->withPath(preg_replace_callback($regex, $callback, $uri->getPath()))->withQuery(preg_replace_callback($regex, $callback, $uri->getQuery())); goto ESwzS; X_SuY: $callback = function (array $match) { return strtoupper($match[0]); }; goto Azf7c; saJ30: $regex = "\x2f\50\77\x3a\x25\133\101\x2d\106\141\x2d\x66\x30\55\71\135\x7b\x32\175\51\x2b\x2b\x2f"; goto X_SuY; ESwzS: } private static function decodeUnreservedCharacters(UriInterface $uri) { goto b_ENd; wr_Yv: return $uri->withPath(preg_replace_callback($regex, $callback, $uri->getPath()))->withQuery(preg_replace_callback($regex, $callback, $uri->getQuery())); goto Xadjy; KPn5X: $callback = function (array $match) { return rawurldecode($match[0]); }; goto wr_Yv; b_ENd: $regex = "\57\x25\50\x3f\x3a\x32\x44\x7c\62\x45\x7c\x35\x46\174\67\105\174\63\133\x30\x2d\x39\x5d\174\133\x34\x36\135\x5b\61\x2d\x39\101\x2d\x46\x5d\x7c\x5b\x35\67\x5d\x5b\60\55\71\101\x5d\51\57\x69"; goto KPn5X; Xadjy: } private function __construct() { } }