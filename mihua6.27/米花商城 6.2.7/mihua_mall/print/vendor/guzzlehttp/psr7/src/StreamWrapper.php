<?php
 namespace GuzzleHttp\Psr7; use Psr\Http\Message\StreamInterface; class StreamWrapper { public $context; private $stream; private $mode; public static function getResource(StreamInterface $stream) { goto Tzyki; hBULj: throw new \InvalidArgumentException("\124\x68\x65\40\x73\x74\162\145\141\155\x20\155\165\163\164\x20\142\145\40\x72\145\141\144\141\142\x6c\145\54\x20" . "\167\162\x69\164\x61\x62\154\145\54\40\x6f\162\x20\x62\157\x74\x68\56"); goto Y033B; Eb2cb: $mode = $stream->isWritable() ? "\x72\53" : "\162"; goto P74H_; P74H_: goto jq5RK; goto MPQRy; nllRq: $mode = "\x77"; goto odJ2k; C1RQF: if ($stream->isWritable()) { goto Fmbk4; } goto hBULj; Y033B: goto jq5RK; goto Su8cv; odJ2k: jq5RK: goto yJFEZ; Su8cv: oYN4Q: goto Eb2cb; Tzyki: self::register(); goto ROD5o; MPQRy: Fmbk4: goto nllRq; yJFEZ: return fopen("\147\x75\x7a\172\x6c\145\x3a\x2f\57\x73\x74\x72\145\141\155", $mode, null, stream_context_create(["\147\x75\x7a\172\154\x65" => ["\x73\x74\x72\x65\141\x6d" => $stream]])); goto sbBTL; ROD5o: if ($stream->isReadable()) { goto oYN4Q; } goto C1RQF; sbBTL: } public static function register() { goto nE3h3; ppbcM: stream_wrapper_register("\147\x75\172\x7a\154\145", __CLASS__); goto XmCZz; nE3h3: if (in_array("\x67\165\172\x7a\x6c\145", stream_get_wrappers())) { goto IfZ6f; } goto ppbcM; XmCZz: IfZ6f: goto afubs; afubs: } public function stream_open($path, $mode, $options, &$opened_path) { goto J9pPT; MCmFx: if (isset($options["\x67\x75\172\172\x6c\145"]["\x73\164\162\x65\x61\x6d"])) { goto vxvr6; } goto b2OJF; awDza: $this->stream = $options["\x67\165\x7a\172\x6c\145"]["\163\164\162\145\x61\155"]; goto FXmoh; Led2H: vxvr6: goto xlgK7; J9pPT: $options = stream_context_get_options($this->context); goto MCmFx; FXmoh: return true; goto uK9Uf; b2OJF: return false; goto Led2H; xlgK7: $this->mode = $mode; goto awDza; uK9Uf: } public function stream_read($count) { return $this->stream->read($count); } public function stream_write($data) { return (int) $this->stream->write($data); } public function stream_tell() { return $this->stream->tell(); } public function stream_eof() { return $this->stream->eof(); } public function stream_seek($offset, $whence) { $this->stream->seek($offset, $whence); return true; } public function stream_stat() { static $modeMap = array("\x72" => 33060, "\162\x2b" => 33206, "\x77" => 33188); return ["\x64\145\166" => 0, "\x69\156\x6f" => 0, "\155\x6f\144\145" => $modeMap[$this->mode], "\x6e\154\x69\x6e\153" => 0, "\x75\x69\x64" => 0, "\147\x69\x64" => 0, "\x72\144\x65\x76" => 0, "\163\x69\172\x65" => $this->stream->getSize() ?: 0, "\x61\x74\151\155\145" => 0, "\x6d\164\x69\x6d\145" => 0, "\143\164\151\x6d\x65" => 0, "\x62\x6c\x6b\163\151\x7a\x65" => 0, "\x62\x6c\x6f\x63\x6b\x73" => 0]; } }