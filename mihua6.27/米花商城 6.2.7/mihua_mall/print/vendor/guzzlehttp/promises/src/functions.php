<?php
 namespace GuzzleHttp\Promise; function queue(TaskQueueInterface $assign = null) { goto ckPO3; bkrBF: goto xizdV; goto YjZbn; JoOWA: $queue = $assign; goto bJpcO; cgT4v: if ($assign) { goto QPGQJ; } goto Pi1jy; ckPO3: static $queue; goto cgT4v; YjZbn: QPGQJ: goto JoOWA; Pi1jy: if (!$queue) { goto yUpTj; } goto bkrBF; iSCQZ: xizdV: goto BUlPf; U4kNW: $queue = new TaskQueue(); goto iSCQZ; bJpcO: goto xizdV; goto nhJtz; nhJtz: yUpTj: goto U4kNW; BUlPf: return $queue; goto qJrFY; qJrFY: } function task(callable $task) { goto pqRKz; P4gjT: $queue->add(function () use($task, $promise) { try { $promise->resolve($task()); } catch (\Throwable $e) { $promise->reject($e); } catch (\Exception $e) { $promise->reject($e); } }); goto F5NHz; F5NHz: return $promise; goto wLikE; pqRKz: $queue = queue(); goto G_5Bb; G_5Bb: $promise = new Promise([$queue, "\x72\x75\x6e"]); goto P4gjT; wLikE: } function promise_for($value) { goto ab7vD; pYeri: return $promise; goto KySeg; UskjK: if (!method_exists($value, "\x74\150\x65\156")) { goto sa0BP; } goto EdJcN; idH08: return $value; goto Znqh1; Znqh1: wbwvX: goto UskjK; Kn07A: $cfn = method_exists($value, "\x63\141\156\x63\x65\x6c") ? [$value, "\x63\141\x6e\x63\x65\x6c"] : null; goto zxg9i; zxg9i: $promise = new Promise($wfn, $cfn); goto Vjm1n; dl0Ok: return new FulfilledPromise($value); goto tdbRZ; Vjm1n: $value->then([$promise, "\x72\145\x73\157\x6c\166\145"], [$promise, "\162\145\152\145\143\x74"]); goto pYeri; ab7vD: if (!$value instanceof PromiseInterface) { goto wbwvX; } goto idH08; EdJcN: $wfn = method_exists($value, "\x77\141\x69\x74") ? [$value, "\x77\141\x69\164"] : null; goto Kn07A; KySeg: sa0BP: goto dl0Ok; tdbRZ: } function rejection_for($reason) { goto togMg; pbjvX: return $reason; goto dEkga; dEkga: ZAGYo: goto ropro; togMg: if (!$reason instanceof PromiseInterface) { goto ZAGYo; } goto pbjvX; ropro: return new RejectedPromise($reason); goto KrqCy; KrqCy: } function exception_for($reason) { return $reason instanceof \Exception || $reason instanceof \Throwable ? $reason : new RejectionException($reason); } function iter_for($value) { goto F3UHp; yBz_A: goto RtPGA; goto DGDdx; Ls6mf: goto RtPGA; goto n1YBG; AntV0: RtPGA: goto AobQC; snOck: if (is_array($value)) { goto w5IgK; } goto nnedu; nnedu: return new \ArrayIterator([$value]); goto Ls6mf; X1k9E: return new \ArrayIterator($value); goto AntV0; DGDdx: w5IgK: goto X1k9E; n1YBG: Tx2ga: goto wgrWd; F3UHp: if ($value instanceof \Iterator) { goto Tx2ga; } goto snOck; wgrWd: return $value; goto yBz_A; AobQC: } function inspect(PromiseInterface $promise) { try { return ["\163\x74\x61\164\x65" => PromiseInterface::FULFILLED, "\x76\141\154\x75\x65" => $promise->wait()]; } catch (RejectionException $e) { return ["\163\164\x61\x74\145" => PromiseInterface::REJECTED, "\162\x65\x61\x73\157\x6e" => $e->getReason()]; } catch (\Throwable $e) { return ["\x73\x74\141\164\145" => PromiseInterface::REJECTED, "\x72\145\141\x73\x6f\156" => $e]; } catch (\Exception $e) { return ["\x73\x74\x61\164\145" => PromiseInterface::REJECTED, "\x72\145\141\163\x6f\x6e" => $e]; } } function inspect_all($promises) { goto oq3AO; W3Ne9: tAEfL: goto z4Upb; Kswh2: foreach ($promises as $key => $promise) { $results[$key] = inspect($promise); z0l8w: } goto W3Ne9; z4Upb: return $results; goto ynl9Q; oq3AO: $results = []; goto Kswh2; ynl9Q: } function unwrap($promises) { goto Aiv5L; THzT9: dvuQg: goto Il8Uu; Aiv5L: $results = []; goto Smwzf; Smwzf: foreach ($promises as $key => $promise) { $results[$key] = $promise->wait(); gvZze: } goto THzT9; Il8Uu: return $results; goto SeZos; SeZos: } function all($promises) { $results = []; return each($promises, function ($value, $idx) use(&$results) { $results[$idx] = $value; }, function ($reason, $idx, Promise $aggregate) { $aggregate->reject($reason); })->then(function () use(&$results) { ksort($results); return $results; }); } function some($count, $promises) { goto gwxyq; fssG3: return each($promises, function ($value, $idx, PromiseInterface $p) use(&$results, $count) { if (!($p->getState() !== PromiseInterface::PENDING)) { goto LO35j; } return; LO35j: $results[$idx] = $value; if (!(count($results) >= $count)) { goto cgVCl; } $p->resolve(null); cgVCl: }, function ($reason) use(&$rejections) { $rejections[] = $reason; })->then(function () use(&$results, &$rejections, $count) { if (!(count($results) !== $count)) { goto rWbvv; } throw new AggregateException("\x4e\157\164\x20\145\156\x6f\x75\x67\150\x20\x70\x72\x6f\x6d\x69\x73\x65\163\x20\x74\157\40\x66\165\154\146\x69\x6c\154\x20\x63\x6f\165\x6e\x74", $rejections); rWbvv: ksort($results); return array_values($results); }); goto UJ88U; gwxyq: $results = []; goto TCF0F; TCF0F: $rejections = []; goto fssG3; UJ88U: } function any($promises) { return some(1, $promises)->then(function ($values) { return $values[0]; }); } function settle($promises) { $results = []; return each($promises, function ($value, $idx) use(&$results) { $results[$idx] = ["\x73\164\x61\x74\145" => PromiseInterface::FULFILLED, "\x76\141\154\165\x65" => $value]; }, function ($reason, $idx) use(&$results) { $results[$idx] = ["\x73\164\x61\x74\x65" => PromiseInterface::REJECTED, "\162\x65\141\x73\x6f\x6e" => $reason]; })->then(function () use(&$results) { ksort($results); return $results; }); } function each($iterable, callable $onFulfilled = null, callable $onRejected = null) { return (new EachPromise($iterable, ["\x66\165\154\x66\151\154\x6c\x65\144" => $onFulfilled, "\162\145\x6a\145\x63\164\145\x64" => $onRejected]))->promise(); } function each_limit($iterable, $concurrency, callable $onFulfilled = null, callable $onRejected = null) { return (new EachPromise($iterable, ["\x66\x75\154\x66\x69\154\154\145\x64" => $onFulfilled, "\x72\145\152\145\143\164\x65\x64" => $onRejected, "\x63\157\156\143\165\162\162\x65\156\x63\x79" => $concurrency]))->promise(); } function each_limit_all($iterable, $concurrency, callable $onFulfilled = null) { return each_limit($iterable, $concurrency, $onFulfilled, function ($reason, $idx, PromiseInterface $aggregate) { $aggregate->reject($reason); }); } function is_fulfilled(PromiseInterface $promise) { return $promise->getState() === PromiseInterface::FULFILLED; } function is_rejected(PromiseInterface $promise) { return $promise->getState() === PromiseInterface::REJECTED; } function is_settled(PromiseInterface $promise) { return $promise->getState() !== PromiseInterface::PENDING; } function coroutine(callable $generatorFn) { return new Coroutine($generatorFn); }