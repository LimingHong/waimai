<?php
 namespace GuzzleHttp\Psr7; use Psr\Http\Message\StreamInterface; trait StreamDecoratorTrait { public function __construct(StreamInterface $stream) { $this->stream = $stream; } public function __get($name) { goto aRqZN; fQ5bC: kVzcI: goto svWNu; aRqZN: if (!($name == "\163\x74\x72\145\x61\x6d")) { goto kVzcI; } goto cCcOd; T1dWj: return $this->stream; goto fQ5bC; svWNu: throw new \UnexpectedValueException("{$name}\40\x6e\x6f\164\x20\146\x6f\x75\156\x64\40\157\156\40\143\154\141\163\163"); goto XrXfN; cCcOd: $this->stream = $this->createStream(); goto T1dWj; XrXfN: } public function __toString() { try { goto XRg5H; XRg5H: if (!$this->isSeekable()) { goto f0V7s; } goto h0SMw; h0SMw: $this->seek(0); goto kvwBd; kj0eA: return $this->getContents(); goto PpK4x; kvwBd: f0V7s: goto kj0eA; PpK4x: } catch (\Exception $e) { trigger_error("\123\164\x72\145\141\155\x44\145\143\157\162\x61\x74\157\x72\x3a\72\137\137\164\x6f\123\x74\x72\x69\156\x67\40\145\170\x63\x65\x70\x74\151\x6f\156\x3a\x20" . (string) $e, E_USER_ERROR); return ''; } } public function getContents() { return copy_to_string($this); } public function __call($method, array $args) { $result = call_user_func_array([$this->stream, $method], $args); return $result === $this->stream ? $this : $result; } public function close() { $this->stream->close(); } public function getMetadata($key = null) { return $this->stream->getMetadata($key); } public function detach() { return $this->stream->detach(); } public function getSize() { return $this->stream->getSize(); } public function eof() { return $this->stream->eof(); } public function tell() { return $this->stream->tell(); } public function isReadable() { return $this->stream->isReadable(); } public function isWritable() { return $this->stream->isWritable(); } public function isSeekable() { return $this->stream->isSeekable(); } public function rewind() { $this->seek(0); } public function seek($offset, $whence = SEEK_SET) { $this->stream->seek($offset, $whence); } public function read($length) { return $this->stream->read($length); } public function write($string) { return $this->stream->write($string); } protected function createStream() { throw new \BadMethodCallException("\116\157\164\40\151\155\x70\x6c\145\x6d\145\156\x74\x65\144"); } }